<?php

namespace common\models\c2\entity;

use common\models\c2\statics\FeUserType;
use cza\base\models\statics\EntityModelStatus;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%user_chess_rs}}".
 *
 * @property string $id
 * @property string $user_id
 * @property string $chess_id
 * @property integer $type
 * @property integer $state
 * @property integer $status
 * @property integer $position
 * @property string $created_at
 * @property string $updated_at
 */
class UserChessRsModel extends \cza\base\models\ActiveRecord
{

    public $chess_code;
    public $type_label;

    const SCENARIO_UPDATE_USER = 'update_user';
    const SCENARIO_CREATE_USER = 'create_user';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user_chess_rs}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'chess_id', 'position'], 'integer',],
            [['user_id',], 'required', 'on' => self::SCENARIO_UPDATE_USER],
            [['user_id', 'chess_id'], 'required'],
            [['user_id',], 'userValid', 'on' => self::SCENARIO_CREATE_USER],
            [['created_at', 'updated_at'], 'safe'],
            [['status', 'state'], 'integer', 'max' => 4],
            [['type'], 'integer', 'max' => 8],
        ];
    }

    /**
     * @return array
     */
    // public function scenarios()
    // {
    //     $scenarios = parent::scenarios();
    //     $scenarios[self::SCENARIO_UPDATE_USER] = [];
    //     $scenarios[self::SCENARIO_CREATE_USER] = ['user_id'];
    //     return $scenarios;
    // }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app.c2', 'ID'),
            'user_id' => Yii::t('app.c2', 'User ID'),
            'chess_id' => Yii::t('app.c2', 'Chess ID'),
            'type' => Yii::t('app.c2', 'Type'),
            'status' => Yii::t('app.c2', 'Status'),
            'position' => Yii::t('app.c2', 'Position'),
            'created_at' => Yii::t('app.c2', 'Created At'),
            'updated_at' => Yii::t('app.c2', 'Updated At'),
        ];
    }

    /**
     * Valid the user is multiple in the chess and type.
     * @param $attribute
     * @param $params
     */
    public function userValid($attribute, $params)
    {

        if (!$this->hasErrors()) {
            $user = self::find()->where(['chess_id' => $this->chess_id, 'user_id' => $this->user_id, 'type' => $this->type])->one();
            if (!is_null($user)) {
                $this->addError($attribute, Yii::t('app.c2', 'User no allow this type'));
            }
        }
    }

    /**
     * @inheritdoc
     * @return \common\models\c2\query\UserChessRsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\c2\query\UserChessRsQuery(get_called_class());
    }

    /**
     * setup default values
     **/
    public function loadDefaultValues($skipIfSet = true)
    {
        parent::loadDefaultValues($skipIfSet);
    }

    public function getChess()
    {
        return $this->hasOne(ChessModel::className(), ['id' => 'chess_id']);
    }

    public function getUser()
    {
        return $this->hasOne(FeUserModel::className(), ['id' => 'user_id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function createRelations()
    {
        $items = $this->getChessUser8Type();
        if ($items != null) {
            if ($this->type != FeUserType::TYPE_FAMILIAR) {
                foreach ($items as $item) {
                    $model = new UserDevelopmentModel();
                    $attrs = [
                        'user_chess_rs_id' => $item->id,
                        'chess_id' => $item->chess_id,
                        'user_id' => $this->user_id,
                        // 'parent_id' => $item->user_id,
                        'type' => $this->type,
                    ];
                    $model->setAttributes($attrs);
                    $model->save();
                }
            } else {
                $this->createChessMasterFamiliarRs($items);
            }
        }
    }

    public function getChessUser8Type($cond = [])
    {
        switch ($this->type) {
            case FeUserType::TYPE_ELDER:
                return self::find()->where(['chess_id' => $this->chess_id, 'type' => FeUserType::TYPE_LORD])
                    ->andWhere($cond)
                    ->orderBy(['position' => SORT_ASC])
                    ->all();
                break;
            case FeUserType::TYPE_CHIEFTAIN:
                return self::find()->where(['chess_id' => $this->chess_id, 'type' => FeUserType::TYPE_ELDER])
                    ->andWhere($cond)
                    ->orderBy(['position' => SORT_ASC])
                    ->all();
                break;
            case FeUserType::TYPE_MASTER:
                $q = self::find()->where(['chess_id' => $this->chess_id, 'type' => FeUserType::TYPE_CHIEFTAIN])
                    ->andWhere($cond)
                    ->orderBy(['position' => SORT_ASC]);
                if ($q->count() < 3) {
                    return null;
                }
                return $q->all();
                break;
            case FeUserType::TYPE_FAMILIAR:
                return self::find()->where(['chess_id' => $this->chess_id, 'type' => FeUserType::TYPE_MASTER])
                    ->andWhere($cond)
                    ->orderBy(['position' => SORT_ASC])
                    ->all();
                break;
        }
        return null;
    }

    /**
     * Evil epoll
     * Create chess familiar and set the regular position.
     * @param $familiarCount
     * @return bool
     */
    public function createChessMasterFamiliarRs($items)
    {
        // This chess masters
        $familiarCount = self::find()->where(['chess_id' => $this->chess_id, 'type' => FeUserType::TYPE_FAMILIAR])
            ->count();
        $masterIds = ArrayHelper::getColumn($items, 'id');
        $currentUserIndex = $familiarCount + 1; // Current familiar user created index.
        $baseNum = 1;
        for ($i = 0; $i < 3; $i++) {
            for ($j = 0; $j < 3; $j++) {
                if ($currentUserIndex == $baseNum + $j * 3) {
                    $model = new UserDevelopmentModel();
                    $attrs = [
                        'user_chess_rs_id' => $masterIds[$i],
                        'chess_id' => $this->chess_id,
                        'user_id' => $this->user_id,
                        // 'parent_id' => $item->user_id,
                        'type' => $this->type,
                    ];
                    $model->setAttributes($attrs);
                    if ($model->save()) {
                        return true;
                        break;
                    }
                }
            }
            $baseNum++;
        }
    }

    public function getUserDevelopments()
    {
        return $this->hasMany(UserDevelopmentModel::className(), ['user_chess_rs_id' => 'id']);
    }

    public function beforeDelete()
    {
        foreach ($this->getUserDevelopments()->all() as $item) {
            $item->delete();
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public static function getUsernameHashMap($chess_id = null)
    {
        $items = self::find()->where(['chess_id' => $chess_id])
            // ->andWhere(['status' => EntityModelStatus::STATUS_ACTIVE])
            ->joinWith(['user'])
            // ->select(['{{%user_chess_rs}}.id', '{{%fe_user}}.username'])
            ->asArray()->all();
        return ArrayHelper::map($items, 'id', 'user.username');
    }

    public function isCanKpi()
    {
        if ($this->type == FeUserType::TYPE_PEASANT ||
            $this->type == FeUserType::TYPE_FAMILIAR ||
            $this->type == FeUserType::TYPE_MASTER) {
            return true;
        }
        return false;
    }

}
