<?php

namespace common\models\c2\entity;

use backend\models\c2\entity\rbac\BeUser;
use backend\modules\CRM\modules\GRP\modules\GRPStationItem\widgets\EntityDetail;
use common\helpers\CodeGenerator;
use common\models\c2\statics\GRPState;
use common\models\c2\statics\GRPStationType;
use common\models\c2\statics\GRPType;
use cza\base\models\statics\EntityModelStatus;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;

/**
 * This is the model class for table "{{%grp}}".
 *
 * @property string $id
 * @property integer $type
 * @property string $attributeset_id
 * @property string $province_id
 * @property string $city_id
 * @property string $district_id
 * @property string $code
 * @property string $label
 * @property string $seo_code
 * @property string $geo_longitude
 * @property string $geo_latitude
 * @property string $geo_marker_color
 * @property string $created_by
 * @property string $updated_by
 * @property integer $state
 * @property integer $status
 * @property integer $position
 * @property string $created_at
 * @property string $updated_at
 */
class GRPModel extends \cza\base\models\ActiveRecord
{
    public $grpStations;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%grp}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['attributeset_id', 'province_id', 'city_id', 'district_id', 'created_by', 'updated_by', 'position'], 'integer'],
            [['label'], 'required'],
            [['created_at', 'updated_at'], 'safe'],
            [['type', 'status', 'state'], 'integer', 'max' => 4],
            [['code', 'seo_code', 'label', 'geo_longitude', 'geo_latitude', 'geo_marker_color'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app.c2', 'ID'),
            'type' => Yii::t('app.c2', 'Type'),
            'attributeset_id' => Yii::t('app.c2', 'Attributeset ID'),
            'province_id' => Yii::t('app.c2', 'Province'),
            'city_id' => Yii::t('app.c2', 'City'),
            'district_id' => Yii::t('app.c2', 'District'),
            'code' => Yii::t('app.c2', 'Code'),
            'seo_code' => Yii::t('app.c2', 'Seo Code'),
            'label' => Yii::t('app.c2', 'Label'),
            'geo_longitude' => Yii::t('app.c2', 'Geo Longitude'),
            'geo_latitude' => Yii::t('app.c2', 'Geo Latitude'),
            'geo_marker_color' => Yii::t('app.c2', 'Geo Marker Color'),
            'created_by' => Yii::t('app.c2', 'Created By'),
            'updated_by' => Yii::t('app.c2', 'Updated By'),
            'state' => Yii::t('app.c2', 'State'),
            'status' => Yii::t('app.c2', 'Status'),
            'position' => Yii::t('app.c2', 'Position'),
            'created_at' => Yii::t('app.c2', 'Created At'),
            'updated_at' => Yii::t('app.c2', 'Updated At'),
        ];
    }

    /**
     * @inheritdoc
     * @return \common\models\c2\query\GRPQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\c2\query\GRPQuery(get_called_class());
    }

    /**
     * setup default values
     **/
    public function loadDefaultValues($skipIfSet = true)
    {
        parent::loadDefaultValues($skipIfSet);
        if ($this->isNewRecord) {
            $this->code = CodeGenerator::getCodeByDate($this, 'GRP');
            $this->seo_code = Yii::$app->security->generateRandomString(10);
        }
    }

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            BlameableBehavior::className()
        ]);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($this->type == GRPType::TYPE_DEFAULT) {
            $attributes = [
                'grp_id' => $this->id,
                'children_id' => $this->id,
                'parent_id' => null,
            ];
            $model = new GRPBranchModel();
            $model->setAttributes($attributes);
            $model->save();
        }
    }

    public function getCreator()
    {
        return $this->hasOne(BeUser::className(), ['id' => 'created_by']);
    }

    public function getUpdater()
    {
        return $this->hasOne(BeUser::className(), ['id' => 'updated_by']);
    }

    public function getGRPStation()
    {
        return $this->hasMany(GRPStationModel::className(), ['grp_id' => 'id']);
    }

    public function getGRPStationJson($withMember = false)
    {
        $root = GRPStationModel::find()->where(['type' => GRPStationType::TYPE_C3, 'grp_id' => $this->id])->one();
        $this->grpStations = $this->getGRPStation()->all();
        if ($root) {
            $data = [
                'id' => $root->id,
                'name' => $root->label,
                'type' => $root->type,
                'parent_id' => $root->parent_station_id,
                'memberList' => $withMember ? $root->getGRPStationMemberArr() : [],
                'children' => $this->getGRPStationChildren($root, $withMember),
            ];
            // Yii::info($data);
            return Json::encode($data);
            // return json_encode($data);
        }
        return null;
    }

    public function getGRPStationChildren($parent, $withMember)
    {
        $rec = [];
        foreach ($this->grpStations as $grpStation) {
            if ($grpStation->parent_station_id == $parent->id) {
                $children = [];
                if ($this->isHasChildren($grpStation)) {
                    $children = $this->getGRPStationChildren($grpStation, $withMember);
                }
                $rec[] = [
                    'id' => $grpStation->id,
                    'name' => $grpStation->label,
                    'type' => $grpStation->type,
                    'parent_id' => $parent->id,
                    'memberList' => $withMember ? $grpStation->getGRPStationMemberArr() : [],
                    'children' => $children
                ];
            }
        }
        return $rec;
    }

    public function isHasChildren($parent)
    {
        foreach ($this->grpStations as $grpStation) {
            if ($grpStation->parent_station_id == $parent->id) {
                return true;
            }
        }
        return false;
    }

    public function getParentGRP()
    {
        return $this->hasOne(GRPModel::className(), ['id' => 'parent_id'])
            ->where(['status' => EntityModelStatus::STATUS_ACTIVE])
            ->viaTable('{{%grp_branch}}', ['children_id' => 'id']);
    }

    public function getGRPBranch()
    {
        return $this->hasMany(GRPBranchModel::className(), ['grp_id' => 'id']);
    }

    public function initStation()
    {
        $db = Yii::$app->db->beginTransaction();
        $c3Model = new GRPStationModel();
        $c3Model->setAttributes([
            'grp_id' => $this->id,
            'type' => GRPStationType::TYPE_C3,
            'name' => GRPStationType::getLabel(GRPStationType::TYPE_C3),
            'label' => GRPStationType::getLabel(GRPStationType::TYPE_C3),
            'parent_station_id' => 0,
        ]);
        if ($c3Model->save()) {
            $c2Model = new GRPStationModel();
            $c2Model->setAttributes([
                'grp_id' => $this->id,
                'type' => GRPStationType::TYPE_C2,
                'name' => GRPStationType::getLabel(GRPStationType::TYPE_C2),
                'label' => GRPStationType::getLabel(GRPStationType::TYPE_C2),
                'parent_station_id' => $c3Model->id,
            ]);
            if ($c2Model->save()) {
                $c1Model = new GRPStationModel();
                $c1Model->setAttributes([
                    'grp_id' => $this->id,
                    'type' => GRPStationType::TYPE_C1,
                    'name' => GRPStationType::getLabel(GRPStationType::TYPE_C1),
                    'label' => GRPStationType::getLabel(GRPStationType::TYPE_C1),
                    'parent_station_id' => $c2Model->id,
                ]);
                if ($c1Model->save()) {
                    for ($i = 0; $i < 3; $i++) {
                        $modelB = new GRPStationModel();
                        $modelB->setAttributes([
                            'grp_id' => $this->id,
                            'type' => GRPStationType::TYPE_B,
                            'name' => GRPStationType::getLabel(GRPStationType::TYPE_B),
                            'label' => GRPStationType::getLabel(GRPStationType::TYPE_B),
                            'parent_station_id' => $c1Model->id,
                        ]);
                        if ($modelB->save()) {
                            for ($j = 0; $j < 3; $j++) {
                                $modelA = new GRPStationModel();
                                $modelA->setAttributes([
                                    'grp_id' => $this->id,
                                    'type' => GRPStationType::TYPE_A,
                                    'name' => GRPStationType::getLabel(GRPStationType::TYPE_A),
                                    'label' => GRPStationType::getLabel(GRPStationType::TYPE_A),
                                    'parent_station_id' => $modelB->id,
                                ]);
                                if ($modelA->save()) {
                                    for ($k = 0; $k < 3; $k++) {
                                        $modelP = new GRPStationModel();
                                        $modelP->setAttributes([
                                            'grp_id' => $this->id,
                                            'type' => GRPStationType::TYPE_P,
                                            'name' => GRPStationType::getLabel(GRPStationType::TYPE_P),
                                            'label' => GRPStationType::getLabel(GRPStationType::TYPE_P),
                                            'parent_station_id' => $modelA->id,
                                        ]);
                                        $modelP->save();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        $this->updateAttributes(['state' => GRPState::TYPE_INIT]);
        $db->commit();
        return true;
    }

}
