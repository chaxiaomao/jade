<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/4/15
 * Time: 10:09
 */

namespace backend\widgets;


use common\models\c2\statics\UserKpiStateType;
use frontend\models\c2\entity\UserKpiModel;
use Yii;
use yii\base\Widget;
use yii\helpers\ArrayHelper;

class UserKpiChart extends Widget
{
    public $items;
    public $user;
    public $grpId;
    public $data = "{}";

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (!is_null($this->grpId)) {
            $this->items = [];
            $this->items = UserKpiModel::find()
                ->where(['grp_id' => $this->grpId, 'state' => UserKpiStateType::TYPE_FINISH_COMMIT])
                ->all();
            if ($this->isHasKpi($this->user)) {
                $this->data = [
                    'id' => $this->user->id,
                    'name' => $this->user->username,
                    // 'parent_id' => $root->parent_station_id,
                    'children' => $this->getUserKpiChildren($this->user),
                ];
                Yii::info($this->data);
                // return Json::encode($data);
                // return json_encode($data);
            }
        }
    }

    public function isHasKpi($user)
    {
        foreach ($this->items as $item) {
            if ($item->invite_user_id == $user->id) {
                return true;
            }
        }
        return false;
    }

    public function getUserKpiChildren($parent)
    {
        $rec = [];
        foreach ($this->items as $item) {
            if ($item->invite_user_id == $parent->id) {
                $children = [];
                if ($this->isHasChildren($item)) {
                    $children = $this->getUserKpiChildren2($item);
                }
                $rec[] = [
                    'id' => $item->id,
                    'name' => $item->joinUser->username,
                    'children' => $children
                ];
            }
        }
        return $rec;
    }

    public function getUserKpiChildren2($parent)
    {
        $rec = [];
        foreach ($this->items as $item) {
            if ($item->invite_user_id == $parent->join_user_id) {
                $children = [];
                if ($this->isHasChildren($item)) {
                    $children = $this->getUserKpiChildren2($item);
                }
                $rec[] = [
                    'id' => $item->id,
                    'name' => $item->joinUser->username,
                    'children' => $children
                ];
            }
        }
        return $rec;
    }

    public function isHasChildren($parent)
    {
        foreach ($this->items as $item) {
            if ($item->invite_user_id === $parent->join_user_id) {
                return true;
            }
        }
        return false;
    }

    public function run()
    {

        return $this->render('userKpiChart', [
            'data' => $this->data,
            'user' => $this->user,
        ]);
    }
}