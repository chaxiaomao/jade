<?php

namespace common\models\c2\entity;

use backend\models\c2\entity\rbac\BeUser;
use common\helpers\CodeGenerator;
use common\models\c2\statics\GRPStationType;
use common\models\c2\statics\GRPType;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%grp}}".
 *
 * @property string $id
 * @property integer $type
 * @property string $attributeset_id
 * @property string $province_id
 * @property string $city_id
 * @property string $district_id
 * @property string $code
 * @property string $label
 * @property string $geo_longitude
 * @property string $geo_latitude
 * @property string $geo_marker_color
 * @property string $created_by
 * @property string $updated_by
 * @property integer $status
 * @property integer $position
 * @property string $created_at
 * @property string $updated_at
 */
class GRPModel extends \cza\base\models\ActiveRecord
{
    public $grpStations;
    public $grpStationChildren = [];


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%grp}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['attributeset_id', 'province_id', 'city_id', 'district_id', 'created_by', 'updated_by', 'position'], 'integer'],
            [['label'], 'required'],
            [['created_at', 'updated_at'], 'safe'],
            [['type', 'status'], 'integer', 'max' => 4],
            [['code', 'label', 'geo_longitude', 'geo_latitude', 'geo_marker_color'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app.c2', 'ID'),
            'type' => Yii::t('app.c2', 'Type'),
            'attributeset_id' => Yii::t('app.c2', 'Attributeset ID'),
            'province_id' => Yii::t('app.c2', 'Province'),
            'city_id' => Yii::t('app.c2', 'City'),
            'district_id' => Yii::t('app.c2', 'District'),
            'code' => Yii::t('app.c2', 'Code'),
            'label' => Yii::t('app.c2', 'Label'),
            'geo_longitude' => Yii::t('app.c2', 'Geo Longitude'),
            'geo_latitude' => Yii::t('app.c2', 'Geo Latitude'),
            'geo_marker_color' => Yii::t('app.c2', 'Geo Marker Color'),
            'created_by' => Yii::t('app.c2', 'Created By'),
            'updated_by' => Yii::t('app.c2', 'Updated By'),
            'status' => Yii::t('app.c2', 'Status'),
            'position' => Yii::t('app.c2', 'Position'),
            'created_at' => Yii::t('app.c2', 'Created At'),
            'updated_at' => Yii::t('app.c2', 'Updated At'),
        ];
    }

    /**
     * @inheritdoc
     * @return \common\models\c2\query\GRPQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\c2\query\GRPQuery(get_called_class());
    }

    /**
     * setup default values
     **/
    public function loadDefaultValues($skipIfSet = true)
    {
        parent::loadDefaultValues($skipIfSet);
        if ($this->isNewRecord) {
            $this->code = CodeGenerator::getCodeByDate($this, 'GRP');
        }
    }

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            BlameableBehavior::className()
        ]);
    }

    public function getCreator()
    {
        return $this->hasOne(BeUser::className(), ['id' => 'created_by']);
    }

    public function getUpdater()
    {
        return $this->hasOne(BeUser::className(), ['id' => 'updated_by']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($insert) {
            $attributes = [
                'type' => GRPStationType::TYPE_C3,
                'name' => 'C3',
                'label' => 'C3',
                'parent_station_id' => 0,
            ];
            $model = new GRPStationModel();
            $model->setAttributes($attributes);
            $model->link('gRP', $this);
        }
    }

    public function getGRPStation()
    {
        return $this->hasMany(GRPStationModel::className(), ['grp_id' => 'id']);
    }


    public function getGRPStationJson()
    {
        $root = GRPStationModel::find()->where(['type' => GRPStationType::TYPE_C3, 'grp_id' => $this->id])->one();
        $this->grpStations = $this->getGRPStation()->orderBy(['type' => SORT_ASC])->all();
        $data = [
            'id' => $root->id,
            'name' => $root->label,
            'type' => $root->type,
            'parent_id' => $root->parent_station_id,
            // 'useList' => [],
            'children' => [],
        ];
        if ($root) {
            // $data['useList'] = $root->getGRPStationItems()->all();
            $this->getGRPStationChildren($root->id);
            if (count($this->grpStationChildren) > 0) {
                $data['children'] = $this->grpStationChildren;
            }
            Yii::info(json_encode($data));
            return json_encode($data);
        }
        return $data;
    }

    public function getGRPStationChildren($parent_id)
    {
        foreach ($this->grpStations as $grpStation) {
            if ($grpStation->parent_station_id == $parent_id) {
                $children = [];
                array_push($children, $this->getGRPStationChildren2($grpStation->id));
                if ($children[0] == []) {
                    $children = [];
                }
                $data = [
                    'id' => $grpStation->id,
                    'name' => $grpStation->label,
                    'type' => $grpStation->type,
                    'parent_id' => $parent_id,
                    // 'useList' => $item->getGRPStationItems()->select(['id', 'name'])->all(),
                    'children' => $children
                ];
                array_push($this->grpStationChildren, $data);
            } else {
                continue;
            }
        }
        return [];
    }

    public function getGRPStationChildren2($parent_id)
    {
        foreach ($this->grpStations as $grpStation) {
            if ($grpStation->parent_station_id == $parent_id) {
                return [
                    'id' => $grpStation->id,
                    'name' => $grpStation->label,
                    'type' => $grpStation->type,
                    'parent_id' => $parent_id,
                    // 'useList' => $item->getGRPStationItems()->select(['id', 'name'])->all(),
                    'children' => $this->getGRPStationChildren2($grpStation->id),
                ];
            }
        }
        return [];
    }

}
